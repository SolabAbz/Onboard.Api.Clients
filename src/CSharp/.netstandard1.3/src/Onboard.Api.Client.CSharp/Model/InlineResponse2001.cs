/* 
 * Onboard Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Onboard.Api.Client.CSharp.Client.SwaggerDateConverter;

namespace Onboard.Api.Client.CSharp.Model
{
    /// <summary>
    /// InlineResponse2001
    /// </summary>
    [DataContract]
    public partial class InlineResponse2001 :  IEquatable<InlineResponse2001>
    {
        /// <summary>
        /// Defines MaritalStatus
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MaritalStatusEnum
        {
            
            /// <summary>
            /// Enum Single for value: Single
            /// </summary>
            [EnumMember(Value = "Single")]
            Single = 1,
            
            /// <summary>
            /// Enum Married for value: Married
            /// </summary>
            [EnumMember(Value = "Married")]
            Married = 2,
            
            /// <summary>
            /// Enum Widowed for value: Widowed
            /// </summary>
            [EnumMember(Value = "Widowed")]
            Widowed = 3,
            
            /// <summary>
            /// Enum Separated for value: Separated
            /// </summary>
            [EnumMember(Value = "Separated")]
            Separated = 4,
            
            /// <summary>
            /// Enum Divorced for value: Divorced
            /// </summary>
            [EnumMember(Value = "Divorced")]
            Divorced = 5,
            
            /// <summary>
            /// Enum CivilPartnership for value: CivilPartnership
            /// </summary>
            [EnumMember(Value = "CivilPartnership")]
            CivilPartnership = 6,
            
            /// <summary>
            /// Enum Partner for value: Partner
            /// </summary>
            [EnumMember(Value = "Partner")]
            Partner = 7
        }

        /// <summary>
        /// Gets or Sets MaritalStatus
        /// </summary>
        [DataMember(Name="maritalStatus", EmitDefaultValue=false)]
        public MaritalStatusEnum? MaritalStatus { get; set; }
        /// <summary>
        /// Defines Gender
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum GenderEnum
        {
            
            /// <summary>
            /// Enum Male for value: Male
            /// </summary>
            [EnumMember(Value = "Male")]
            Male = 1,
            
            /// <summary>
            /// Enum Female for value: Female
            /// </summary>
            [EnumMember(Value = "Female")]
            Female = 2
        }

        /// <summary>
        /// Gets or Sets Gender
        /// </summary>
        [DataMember(Name="gender", EmitDefaultValue=false)]
        public GenderEnum? Gender { get; set; }
        /// <summary>
        /// Defines ContractType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ContractTypeEnum
        {
            
            /// <summary>
            /// Enum Permanent for value: Permanent
            /// </summary>
            [EnumMember(Value = "Permanent")]
            Permanent = 1,
            
            /// <summary>
            /// Enum FixedTerm for value: FixedTerm
            /// </summary>
            [EnumMember(Value = "FixedTerm")]
            FixedTerm = 2,
            
            /// <summary>
            /// Enum Other for value: Other
            /// </summary>
            [EnumMember(Value = "Other")]
            Other = 3,
            
            /// <summary>
            /// Enum Contracted for value: Contracted
            /// </summary>
            [EnumMember(Value = "Contracted")]
            Contracted = 4,
            
            /// <summary>
            /// Enum AgencyWorker for value: AgencyWorker
            /// </summary>
            [EnumMember(Value = "AgencyWorker")]
            AgencyWorker = 5
        }

        /// <summary>
        /// Gets or Sets ContractType
        /// </summary>
        [DataMember(Name="contractType", EmitDefaultValue=false)]
        public ContractTypeEnum? ContractType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2001" /> class.
        /// </summary>
        /// <param name="personId">personId.</param>
        /// <param name="userGuid">userGuid.</param>
        /// <param name="continuousServiceDate">continuousServiceDate.</param>
        /// <param name="title">title.</param>
        /// <param name="firstName">firstName.</param>
        /// <param name="middleName">middleName.</param>
        /// <param name="surname">surname.</param>
        /// <param name="hasProfileImage">hasProfileImage.</param>
        /// <param name="maidenName">maidenName.</param>
        /// <param name="teamId">teamId.</param>
        /// <param name="knownAs">knownAs.</param>
        /// <param name="payrollNumber">payrollNumber.</param>
        /// <param name="vantageNumber">vantageNumber.</param>
        /// <param name="irataNumber">irataNumber.</param>
        /// <param name="costCentreId">costCentreId.</param>
        /// <param name="phone">phone.</param>
        /// <param name="personalPhone">personalPhone.</param>
        /// <param name="skypeId">skypeId.</param>
        /// <param name="mobile">mobile.</param>
        /// <param name="personalMobile">personalMobile.</param>
        /// <param name="maritalStatus">maritalStatus.</param>
        /// <param name="email">email.</param>
        /// <param name="homeEmail">homeEmail.</param>
        /// <param name="homeAirport">homeAirport.</param>
        /// <param name="homeTrainStation">homeTrainStation.</param>
        /// <param name="travelPreferences">travelPreferences.</param>
        /// <param name="gender">gender.</param>
        /// <param name="nationalInsuranceNumber">nationalInsuranceNumber.</param>
        /// <param name="altInsuranceNumber">altInsuranceNumber.</param>
        /// <param name="dateOfBirth">dateOfBirth.</param>
        /// <param name="placeOfBirth">placeOfBirth.</param>
        /// <param name="joinDate">joinDate.</param>
        /// <param name="leaveDate">leaveDate.</param>
        /// <param name="firstJoinedDate">firstJoinedDate.</param>
        /// <param name="weeklyHours">weeklyHours.</param>
        /// <param name="jobTitle">jobTitle.</param>
        /// <param name="contractType">contractType.</param>
        /// <param name="annualWorkDays">annualWorkDays.</param>
        /// <param name="holidayEntitlement">holidayEntitlement.</param>
        /// <param name="holidayCarryOver">holidayCarryOver.</param>
        /// <param name="notes">notes.</param>
        /// <param name="certificationNotes">certificationNotes.</param>
        /// <param name="workwearSize">workwearSize.</param>
        /// <param name="shoeSize">shoeSize.</param>
        /// <param name="harnessSize">harnessSize.</param>
        /// <param name="isCurrentlyEmployed">isCurrentlyEmployed.</param>
        /// <param name="idCard">idCard.</param>
        /// <param name="timeStamp">timeStamp.</param>
        /// <param name="groupId">groupId.</param>
        public InlineResponse2001(int? personId = default(int?), Guid? userGuid = default(Guid?), DateTime? continuousServiceDate = default(DateTime?), string title = default(string), string firstName = default(string), string middleName = default(string), string surname = default(string), bool? hasProfileImage = default(bool?), string maidenName = default(string), int? teamId = default(int?), string knownAs = default(string), string payrollNumber = default(string), string vantageNumber = default(string), string irataNumber = default(string), int? costCentreId = default(int?), string phone = default(string), string personalPhone = default(string), string skypeId = default(string), string mobile = default(string), string personalMobile = default(string), MaritalStatusEnum? maritalStatus = default(MaritalStatusEnum?), string email = default(string), string homeEmail = default(string), string homeAirport = default(string), string homeTrainStation = default(string), string travelPreferences = default(string), GenderEnum? gender = default(GenderEnum?), string nationalInsuranceNumber = default(string), string altInsuranceNumber = default(string), DateTime? dateOfBirth = default(DateTime?), string placeOfBirth = default(string), DateTime? joinDate = default(DateTime?), DateTime? leaveDate = default(DateTime?), DateTime? firstJoinedDate = default(DateTime?), double? weeklyHours = default(double?), string jobTitle = default(string), ContractTypeEnum? contractType = default(ContractTypeEnum?), int? annualWorkDays = default(int?), double? holidayEntitlement = default(double?), double? holidayCarryOver = default(double?), string notes = default(string), string certificationNotes = default(string), string workwearSize = default(string), string shoeSize = default(string), string harnessSize = default(string), bool? isCurrentlyEmployed = default(bool?), string idCard = default(string), byte[] timeStamp = default(byte[]), Guid? groupId = default(Guid?))
        {
            this.PersonId = personId;
            this.UserGuid = userGuid;
            this.ContinuousServiceDate = continuousServiceDate;
            this.Title = title;
            this.FirstName = firstName;
            this.MiddleName = middleName;
            this.Surname = surname;
            this.HasProfileImage = hasProfileImage;
            this.MaidenName = maidenName;
            this.TeamId = teamId;
            this.KnownAs = knownAs;
            this.PayrollNumber = payrollNumber;
            this.VantageNumber = vantageNumber;
            this.IrataNumber = irataNumber;
            this.CostCentreId = costCentreId;
            this.Phone = phone;
            this.PersonalPhone = personalPhone;
            this.SkypeId = skypeId;
            this.Mobile = mobile;
            this.PersonalMobile = personalMobile;
            this.MaritalStatus = maritalStatus;
            this.Email = email;
            this.HomeEmail = homeEmail;
            this.HomeAirport = homeAirport;
            this.HomeTrainStation = homeTrainStation;
            this.TravelPreferences = travelPreferences;
            this.Gender = gender;
            this.NationalInsuranceNumber = nationalInsuranceNumber;
            this.AltInsuranceNumber = altInsuranceNumber;
            this.DateOfBirth = dateOfBirth;
            this.PlaceOfBirth = placeOfBirth;
            this.JoinDate = joinDate;
            this.LeaveDate = leaveDate;
            this.FirstJoinedDate = firstJoinedDate;
            this.WeeklyHours = weeklyHours;
            this.JobTitle = jobTitle;
            this.ContractType = contractType;
            this.AnnualWorkDays = annualWorkDays;
            this.HolidayEntitlement = holidayEntitlement;
            this.HolidayCarryOver = holidayCarryOver;
            this.Notes = notes;
            this.CertificationNotes = certificationNotes;
            this.WorkwearSize = workwearSize;
            this.ShoeSize = shoeSize;
            this.HarnessSize = harnessSize;
            this.IsCurrentlyEmployed = isCurrentlyEmployed;
            this.IdCard = idCard;
            this.TimeStamp = timeStamp;
            this.GroupId = groupId;
        }
        
        /// <summary>
        /// Gets or Sets PersonId
        /// </summary>
        [DataMember(Name="personId", EmitDefaultValue=false)]
        public int? PersonId { get; set; }

        /// <summary>
        /// Gets or Sets UserGuid
        /// </summary>
        [DataMember(Name="userGuid", EmitDefaultValue=false)]
        public Guid? UserGuid { get; set; }

        /// <summary>
        /// Gets or Sets ContinuousServiceDate
        /// </summary>
        [DataMember(Name="continuousServiceDate", EmitDefaultValue=false)]
        public DateTime? ContinuousServiceDate { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets MiddleName
        /// </summary>
        [DataMember(Name="middleName", EmitDefaultValue=false)]
        public string MiddleName { get; set; }

        /// <summary>
        /// Gets or Sets Surname
        /// </summary>
        [DataMember(Name="surname", EmitDefaultValue=false)]
        public string Surname { get; set; }

        /// <summary>
        /// Gets or Sets HasProfileImage
        /// </summary>
        [DataMember(Name="hasProfileImage", EmitDefaultValue=false)]
        public bool? HasProfileImage { get; set; }

        /// <summary>
        /// Gets or Sets MaidenName
        /// </summary>
        [DataMember(Name="maidenName", EmitDefaultValue=false)]
        public string MaidenName { get; set; }

        /// <summary>
        /// Gets or Sets TeamId
        /// </summary>
        [DataMember(Name="teamId", EmitDefaultValue=false)]
        public int? TeamId { get; set; }

        /// <summary>
        /// Gets or Sets KnownAs
        /// </summary>
        [DataMember(Name="knownAs", EmitDefaultValue=false)]
        public string KnownAs { get; set; }

        /// <summary>
        /// Gets or Sets PayrollNumber
        /// </summary>
        [DataMember(Name="payrollNumber", EmitDefaultValue=false)]
        public string PayrollNumber { get; set; }

        /// <summary>
        /// Gets or Sets VantageNumber
        /// </summary>
        [DataMember(Name="vantageNumber", EmitDefaultValue=false)]
        public string VantageNumber { get; set; }

        /// <summary>
        /// Gets or Sets IrataNumber
        /// </summary>
        [DataMember(Name="irataNumber", EmitDefaultValue=false)]
        public string IrataNumber { get; set; }

        /// <summary>
        /// Gets or Sets CostCentreId
        /// </summary>
        [DataMember(Name="costCentreId", EmitDefaultValue=false)]
        public int? CostCentreId { get; set; }

        /// <summary>
        /// Gets or Sets Phone
        /// </summary>
        [DataMember(Name="phone", EmitDefaultValue=false)]
        public string Phone { get; set; }

        /// <summary>
        /// Gets or Sets PersonalPhone
        /// </summary>
        [DataMember(Name="personalPhone", EmitDefaultValue=false)]
        public string PersonalPhone { get; set; }

        /// <summary>
        /// Gets or Sets SkypeId
        /// </summary>
        [DataMember(Name="skypeId", EmitDefaultValue=false)]
        public string SkypeId { get; set; }

        /// <summary>
        /// Gets or Sets Mobile
        /// </summary>
        [DataMember(Name="mobile", EmitDefaultValue=false)]
        public string Mobile { get; set; }

        /// <summary>
        /// Gets or Sets PersonalMobile
        /// </summary>
        [DataMember(Name="personalMobile", EmitDefaultValue=false)]
        public string PersonalMobile { get; set; }


        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets HomeEmail
        /// </summary>
        [DataMember(Name="homeEmail", EmitDefaultValue=false)]
        public string HomeEmail { get; set; }

        /// <summary>
        /// Gets or Sets HomeAirport
        /// </summary>
        [DataMember(Name="homeAirport", EmitDefaultValue=false)]
        public string HomeAirport { get; set; }

        /// <summary>
        /// Gets or Sets HomeTrainStation
        /// </summary>
        [DataMember(Name="homeTrainStation", EmitDefaultValue=false)]
        public string HomeTrainStation { get; set; }

        /// <summary>
        /// Gets or Sets TravelPreferences
        /// </summary>
        [DataMember(Name="travelPreferences", EmitDefaultValue=false)]
        public string TravelPreferences { get; set; }


        /// <summary>
        /// Gets or Sets NationalInsuranceNumber
        /// </summary>
        [DataMember(Name="nationalInsuranceNumber", EmitDefaultValue=false)]
        public string NationalInsuranceNumber { get; set; }

        /// <summary>
        /// Gets or Sets AltInsuranceNumber
        /// </summary>
        [DataMember(Name="altInsuranceNumber", EmitDefaultValue=false)]
        public string AltInsuranceNumber { get; set; }

        /// <summary>
        /// Gets or Sets DateOfBirth
        /// </summary>
        [DataMember(Name="dateOfBirth", EmitDefaultValue=false)]
        public DateTime? DateOfBirth { get; set; }

        /// <summary>
        /// Gets or Sets PlaceOfBirth
        /// </summary>
        [DataMember(Name="placeOfBirth", EmitDefaultValue=false)]
        public string PlaceOfBirth { get; set; }

        /// <summary>
        /// Gets or Sets JoinDate
        /// </summary>
        [DataMember(Name="joinDate", EmitDefaultValue=false)]
        public DateTime? JoinDate { get; set; }

        /// <summary>
        /// Gets or Sets LeaveDate
        /// </summary>
        [DataMember(Name="leaveDate", EmitDefaultValue=false)]
        public DateTime? LeaveDate { get; set; }

        /// <summary>
        /// Gets or Sets FirstJoinedDate
        /// </summary>
        [DataMember(Name="firstJoinedDate", EmitDefaultValue=false)]
        public DateTime? FirstJoinedDate { get; set; }

        /// <summary>
        /// Gets or Sets WeeklyHours
        /// </summary>
        [DataMember(Name="weeklyHours", EmitDefaultValue=false)]
        public double? WeeklyHours { get; set; }

        /// <summary>
        /// Gets or Sets JobTitle
        /// </summary>
        [DataMember(Name="jobTitle", EmitDefaultValue=false)]
        public string JobTitle { get; set; }


        /// <summary>
        /// Gets or Sets AnnualWorkDays
        /// </summary>
        [DataMember(Name="annualWorkDays", EmitDefaultValue=false)]
        public int? AnnualWorkDays { get; set; }

        /// <summary>
        /// Gets or Sets HolidayEntitlement
        /// </summary>
        [DataMember(Name="holidayEntitlement", EmitDefaultValue=false)]
        public double? HolidayEntitlement { get; set; }

        /// <summary>
        /// Gets or Sets HolidayCarryOver
        /// </summary>
        [DataMember(Name="holidayCarryOver", EmitDefaultValue=false)]
        public double? HolidayCarryOver { get; set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public string Notes { get; set; }

        /// <summary>
        /// Gets or Sets CertificationNotes
        /// </summary>
        [DataMember(Name="certificationNotes", EmitDefaultValue=false)]
        public string CertificationNotes { get; set; }

        /// <summary>
        /// Gets or Sets WorkwearSize
        /// </summary>
        [DataMember(Name="workwearSize", EmitDefaultValue=false)]
        public string WorkwearSize { get; set; }

        /// <summary>
        /// Gets or Sets ShoeSize
        /// </summary>
        [DataMember(Name="shoeSize", EmitDefaultValue=false)]
        public string ShoeSize { get; set; }

        /// <summary>
        /// Gets or Sets HarnessSize
        /// </summary>
        [DataMember(Name="harnessSize", EmitDefaultValue=false)]
        public string HarnessSize { get; set; }

        /// <summary>
        /// Gets or Sets IsCurrentlyEmployed
        /// </summary>
        [DataMember(Name="isCurrentlyEmployed", EmitDefaultValue=false)]
        public bool? IsCurrentlyEmployed { get; set; }

        /// <summary>
        /// Gets or Sets IdCard
        /// </summary>
        [DataMember(Name="idCard", EmitDefaultValue=false)]
        public string IdCard { get; set; }

        /// <summary>
        /// Gets or Sets TimeStamp
        /// </summary>
        [DataMember(Name="timeStamp", EmitDefaultValue=false)]
        public byte[] TimeStamp { get; set; }

        /// <summary>
        /// Gets or Sets GroupId
        /// </summary>
        [DataMember(Name="groupId", EmitDefaultValue=false)]
        public Guid? GroupId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2001 {\n");
            sb.Append("  PersonId: ").Append(PersonId).Append("\n");
            sb.Append("  UserGuid: ").Append(UserGuid).Append("\n");
            sb.Append("  ContinuousServiceDate: ").Append(ContinuousServiceDate).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  MiddleName: ").Append(MiddleName).Append("\n");
            sb.Append("  Surname: ").Append(Surname).Append("\n");
            sb.Append("  HasProfileImage: ").Append(HasProfileImage).Append("\n");
            sb.Append("  MaidenName: ").Append(MaidenName).Append("\n");
            sb.Append("  TeamId: ").Append(TeamId).Append("\n");
            sb.Append("  KnownAs: ").Append(KnownAs).Append("\n");
            sb.Append("  PayrollNumber: ").Append(PayrollNumber).Append("\n");
            sb.Append("  VantageNumber: ").Append(VantageNumber).Append("\n");
            sb.Append("  IrataNumber: ").Append(IrataNumber).Append("\n");
            sb.Append("  CostCentreId: ").Append(CostCentreId).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  PersonalPhone: ").Append(PersonalPhone).Append("\n");
            sb.Append("  SkypeId: ").Append(SkypeId).Append("\n");
            sb.Append("  Mobile: ").Append(Mobile).Append("\n");
            sb.Append("  PersonalMobile: ").Append(PersonalMobile).Append("\n");
            sb.Append("  MaritalStatus: ").Append(MaritalStatus).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  HomeEmail: ").Append(HomeEmail).Append("\n");
            sb.Append("  HomeAirport: ").Append(HomeAirport).Append("\n");
            sb.Append("  HomeTrainStation: ").Append(HomeTrainStation).Append("\n");
            sb.Append("  TravelPreferences: ").Append(TravelPreferences).Append("\n");
            sb.Append("  Gender: ").Append(Gender).Append("\n");
            sb.Append("  NationalInsuranceNumber: ").Append(NationalInsuranceNumber).Append("\n");
            sb.Append("  AltInsuranceNumber: ").Append(AltInsuranceNumber).Append("\n");
            sb.Append("  DateOfBirth: ").Append(DateOfBirth).Append("\n");
            sb.Append("  PlaceOfBirth: ").Append(PlaceOfBirth).Append("\n");
            sb.Append("  JoinDate: ").Append(JoinDate).Append("\n");
            sb.Append("  LeaveDate: ").Append(LeaveDate).Append("\n");
            sb.Append("  FirstJoinedDate: ").Append(FirstJoinedDate).Append("\n");
            sb.Append("  WeeklyHours: ").Append(WeeklyHours).Append("\n");
            sb.Append("  JobTitle: ").Append(JobTitle).Append("\n");
            sb.Append("  ContractType: ").Append(ContractType).Append("\n");
            sb.Append("  AnnualWorkDays: ").Append(AnnualWorkDays).Append("\n");
            sb.Append("  HolidayEntitlement: ").Append(HolidayEntitlement).Append("\n");
            sb.Append("  HolidayCarryOver: ").Append(HolidayCarryOver).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  CertificationNotes: ").Append(CertificationNotes).Append("\n");
            sb.Append("  WorkwearSize: ").Append(WorkwearSize).Append("\n");
            sb.Append("  ShoeSize: ").Append(ShoeSize).Append("\n");
            sb.Append("  HarnessSize: ").Append(HarnessSize).Append("\n");
            sb.Append("  IsCurrentlyEmployed: ").Append(IsCurrentlyEmployed).Append("\n");
            sb.Append("  IdCard: ").Append(IdCard).Append("\n");
            sb.Append("  TimeStamp: ").Append(TimeStamp).Append("\n");
            sb.Append("  GroupId: ").Append(GroupId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2001);
        }

        /// <summary>
        /// Returns true if InlineResponse2001 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2001 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2001 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PersonId == input.PersonId ||
                    (this.PersonId != null &&
                    this.PersonId.Equals(input.PersonId))
                ) && 
                (
                    this.UserGuid == input.UserGuid ||
                    (this.UserGuid != null &&
                    this.UserGuid.Equals(input.UserGuid))
                ) && 
                (
                    this.ContinuousServiceDate == input.ContinuousServiceDate ||
                    (this.ContinuousServiceDate != null &&
                    this.ContinuousServiceDate.Equals(input.ContinuousServiceDate))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.MiddleName == input.MiddleName ||
                    (this.MiddleName != null &&
                    this.MiddleName.Equals(input.MiddleName))
                ) && 
                (
                    this.Surname == input.Surname ||
                    (this.Surname != null &&
                    this.Surname.Equals(input.Surname))
                ) && 
                (
                    this.HasProfileImage == input.HasProfileImage ||
                    (this.HasProfileImage != null &&
                    this.HasProfileImage.Equals(input.HasProfileImage))
                ) && 
                (
                    this.MaidenName == input.MaidenName ||
                    (this.MaidenName != null &&
                    this.MaidenName.Equals(input.MaidenName))
                ) && 
                (
                    this.TeamId == input.TeamId ||
                    (this.TeamId != null &&
                    this.TeamId.Equals(input.TeamId))
                ) && 
                (
                    this.KnownAs == input.KnownAs ||
                    (this.KnownAs != null &&
                    this.KnownAs.Equals(input.KnownAs))
                ) && 
                (
                    this.PayrollNumber == input.PayrollNumber ||
                    (this.PayrollNumber != null &&
                    this.PayrollNumber.Equals(input.PayrollNumber))
                ) && 
                (
                    this.VantageNumber == input.VantageNumber ||
                    (this.VantageNumber != null &&
                    this.VantageNumber.Equals(input.VantageNumber))
                ) && 
                (
                    this.IrataNumber == input.IrataNumber ||
                    (this.IrataNumber != null &&
                    this.IrataNumber.Equals(input.IrataNumber))
                ) && 
                (
                    this.CostCentreId == input.CostCentreId ||
                    (this.CostCentreId != null &&
                    this.CostCentreId.Equals(input.CostCentreId))
                ) && 
                (
                    this.Phone == input.Phone ||
                    (this.Phone != null &&
                    this.Phone.Equals(input.Phone))
                ) && 
                (
                    this.PersonalPhone == input.PersonalPhone ||
                    (this.PersonalPhone != null &&
                    this.PersonalPhone.Equals(input.PersonalPhone))
                ) && 
                (
                    this.SkypeId == input.SkypeId ||
                    (this.SkypeId != null &&
                    this.SkypeId.Equals(input.SkypeId))
                ) && 
                (
                    this.Mobile == input.Mobile ||
                    (this.Mobile != null &&
                    this.Mobile.Equals(input.Mobile))
                ) && 
                (
                    this.PersonalMobile == input.PersonalMobile ||
                    (this.PersonalMobile != null &&
                    this.PersonalMobile.Equals(input.PersonalMobile))
                ) && 
                (
                    this.MaritalStatus == input.MaritalStatus ||
                    (this.MaritalStatus != null &&
                    this.MaritalStatus.Equals(input.MaritalStatus))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.HomeEmail == input.HomeEmail ||
                    (this.HomeEmail != null &&
                    this.HomeEmail.Equals(input.HomeEmail))
                ) && 
                (
                    this.HomeAirport == input.HomeAirport ||
                    (this.HomeAirport != null &&
                    this.HomeAirport.Equals(input.HomeAirport))
                ) && 
                (
                    this.HomeTrainStation == input.HomeTrainStation ||
                    (this.HomeTrainStation != null &&
                    this.HomeTrainStation.Equals(input.HomeTrainStation))
                ) && 
                (
                    this.TravelPreferences == input.TravelPreferences ||
                    (this.TravelPreferences != null &&
                    this.TravelPreferences.Equals(input.TravelPreferences))
                ) && 
                (
                    this.Gender == input.Gender ||
                    (this.Gender != null &&
                    this.Gender.Equals(input.Gender))
                ) && 
                (
                    this.NationalInsuranceNumber == input.NationalInsuranceNumber ||
                    (this.NationalInsuranceNumber != null &&
                    this.NationalInsuranceNumber.Equals(input.NationalInsuranceNumber))
                ) && 
                (
                    this.AltInsuranceNumber == input.AltInsuranceNumber ||
                    (this.AltInsuranceNumber != null &&
                    this.AltInsuranceNumber.Equals(input.AltInsuranceNumber))
                ) && 
                (
                    this.DateOfBirth == input.DateOfBirth ||
                    (this.DateOfBirth != null &&
                    this.DateOfBirth.Equals(input.DateOfBirth))
                ) && 
                (
                    this.PlaceOfBirth == input.PlaceOfBirth ||
                    (this.PlaceOfBirth != null &&
                    this.PlaceOfBirth.Equals(input.PlaceOfBirth))
                ) && 
                (
                    this.JoinDate == input.JoinDate ||
                    (this.JoinDate != null &&
                    this.JoinDate.Equals(input.JoinDate))
                ) && 
                (
                    this.LeaveDate == input.LeaveDate ||
                    (this.LeaveDate != null &&
                    this.LeaveDate.Equals(input.LeaveDate))
                ) && 
                (
                    this.FirstJoinedDate == input.FirstJoinedDate ||
                    (this.FirstJoinedDate != null &&
                    this.FirstJoinedDate.Equals(input.FirstJoinedDate))
                ) && 
                (
                    this.WeeklyHours == input.WeeklyHours ||
                    (this.WeeklyHours != null &&
                    this.WeeklyHours.Equals(input.WeeklyHours))
                ) && 
                (
                    this.JobTitle == input.JobTitle ||
                    (this.JobTitle != null &&
                    this.JobTitle.Equals(input.JobTitle))
                ) && 
                (
                    this.ContractType == input.ContractType ||
                    (this.ContractType != null &&
                    this.ContractType.Equals(input.ContractType))
                ) && 
                (
                    this.AnnualWorkDays == input.AnnualWorkDays ||
                    (this.AnnualWorkDays != null &&
                    this.AnnualWorkDays.Equals(input.AnnualWorkDays))
                ) && 
                (
                    this.HolidayEntitlement == input.HolidayEntitlement ||
                    (this.HolidayEntitlement != null &&
                    this.HolidayEntitlement.Equals(input.HolidayEntitlement))
                ) && 
                (
                    this.HolidayCarryOver == input.HolidayCarryOver ||
                    (this.HolidayCarryOver != null &&
                    this.HolidayCarryOver.Equals(input.HolidayCarryOver))
                ) && 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                ) && 
                (
                    this.CertificationNotes == input.CertificationNotes ||
                    (this.CertificationNotes != null &&
                    this.CertificationNotes.Equals(input.CertificationNotes))
                ) && 
                (
                    this.WorkwearSize == input.WorkwearSize ||
                    (this.WorkwearSize != null &&
                    this.WorkwearSize.Equals(input.WorkwearSize))
                ) && 
                (
                    this.ShoeSize == input.ShoeSize ||
                    (this.ShoeSize != null &&
                    this.ShoeSize.Equals(input.ShoeSize))
                ) && 
                (
                    this.HarnessSize == input.HarnessSize ||
                    (this.HarnessSize != null &&
                    this.HarnessSize.Equals(input.HarnessSize))
                ) && 
                (
                    this.IsCurrentlyEmployed == input.IsCurrentlyEmployed ||
                    (this.IsCurrentlyEmployed != null &&
                    this.IsCurrentlyEmployed.Equals(input.IsCurrentlyEmployed))
                ) && 
                (
                    this.IdCard == input.IdCard ||
                    (this.IdCard != null &&
                    this.IdCard.Equals(input.IdCard))
                ) && 
                (
                    this.TimeStamp == input.TimeStamp ||
                    (this.TimeStamp != null &&
                    this.TimeStamp.Equals(input.TimeStamp))
                ) && 
                (
                    this.GroupId == input.GroupId ||
                    (this.GroupId != null &&
                    this.GroupId.Equals(input.GroupId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PersonId != null)
                    hashCode = hashCode * 59 + this.PersonId.GetHashCode();
                if (this.UserGuid != null)
                    hashCode = hashCode * 59 + this.UserGuid.GetHashCode();
                if (this.ContinuousServiceDate != null)
                    hashCode = hashCode * 59 + this.ContinuousServiceDate.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.MiddleName != null)
                    hashCode = hashCode * 59 + this.MiddleName.GetHashCode();
                if (this.Surname != null)
                    hashCode = hashCode * 59 + this.Surname.GetHashCode();
                if (this.HasProfileImage != null)
                    hashCode = hashCode * 59 + this.HasProfileImage.GetHashCode();
                if (this.MaidenName != null)
                    hashCode = hashCode * 59 + this.MaidenName.GetHashCode();
                if (this.TeamId != null)
                    hashCode = hashCode * 59 + this.TeamId.GetHashCode();
                if (this.KnownAs != null)
                    hashCode = hashCode * 59 + this.KnownAs.GetHashCode();
                if (this.PayrollNumber != null)
                    hashCode = hashCode * 59 + this.PayrollNumber.GetHashCode();
                if (this.VantageNumber != null)
                    hashCode = hashCode * 59 + this.VantageNumber.GetHashCode();
                if (this.IrataNumber != null)
                    hashCode = hashCode * 59 + this.IrataNumber.GetHashCode();
                if (this.CostCentreId != null)
                    hashCode = hashCode * 59 + this.CostCentreId.GetHashCode();
                if (this.Phone != null)
                    hashCode = hashCode * 59 + this.Phone.GetHashCode();
                if (this.PersonalPhone != null)
                    hashCode = hashCode * 59 + this.PersonalPhone.GetHashCode();
                if (this.SkypeId != null)
                    hashCode = hashCode * 59 + this.SkypeId.GetHashCode();
                if (this.Mobile != null)
                    hashCode = hashCode * 59 + this.Mobile.GetHashCode();
                if (this.PersonalMobile != null)
                    hashCode = hashCode * 59 + this.PersonalMobile.GetHashCode();
                if (this.MaritalStatus != null)
                    hashCode = hashCode * 59 + this.MaritalStatus.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.HomeEmail != null)
                    hashCode = hashCode * 59 + this.HomeEmail.GetHashCode();
                if (this.HomeAirport != null)
                    hashCode = hashCode * 59 + this.HomeAirport.GetHashCode();
                if (this.HomeTrainStation != null)
                    hashCode = hashCode * 59 + this.HomeTrainStation.GetHashCode();
                if (this.TravelPreferences != null)
                    hashCode = hashCode * 59 + this.TravelPreferences.GetHashCode();
                if (this.Gender != null)
                    hashCode = hashCode * 59 + this.Gender.GetHashCode();
                if (this.NationalInsuranceNumber != null)
                    hashCode = hashCode * 59 + this.NationalInsuranceNumber.GetHashCode();
                if (this.AltInsuranceNumber != null)
                    hashCode = hashCode * 59 + this.AltInsuranceNumber.GetHashCode();
                if (this.DateOfBirth != null)
                    hashCode = hashCode * 59 + this.DateOfBirth.GetHashCode();
                if (this.PlaceOfBirth != null)
                    hashCode = hashCode * 59 + this.PlaceOfBirth.GetHashCode();
                if (this.JoinDate != null)
                    hashCode = hashCode * 59 + this.JoinDate.GetHashCode();
                if (this.LeaveDate != null)
                    hashCode = hashCode * 59 + this.LeaveDate.GetHashCode();
                if (this.FirstJoinedDate != null)
                    hashCode = hashCode * 59 + this.FirstJoinedDate.GetHashCode();
                if (this.WeeklyHours != null)
                    hashCode = hashCode * 59 + this.WeeklyHours.GetHashCode();
                if (this.JobTitle != null)
                    hashCode = hashCode * 59 + this.JobTitle.GetHashCode();
                if (this.ContractType != null)
                    hashCode = hashCode * 59 + this.ContractType.GetHashCode();
                if (this.AnnualWorkDays != null)
                    hashCode = hashCode * 59 + this.AnnualWorkDays.GetHashCode();
                if (this.HolidayEntitlement != null)
                    hashCode = hashCode * 59 + this.HolidayEntitlement.GetHashCode();
                if (this.HolidayCarryOver != null)
                    hashCode = hashCode * 59 + this.HolidayCarryOver.GetHashCode();
                if (this.Notes != null)
                    hashCode = hashCode * 59 + this.Notes.GetHashCode();
                if (this.CertificationNotes != null)
                    hashCode = hashCode * 59 + this.CertificationNotes.GetHashCode();
                if (this.WorkwearSize != null)
                    hashCode = hashCode * 59 + this.WorkwearSize.GetHashCode();
                if (this.ShoeSize != null)
                    hashCode = hashCode * 59 + this.ShoeSize.GetHashCode();
                if (this.HarnessSize != null)
                    hashCode = hashCode * 59 + this.HarnessSize.GetHashCode();
                if (this.IsCurrentlyEmployed != null)
                    hashCode = hashCode * 59 + this.IsCurrentlyEmployed.GetHashCode();
                if (this.IdCard != null)
                    hashCode = hashCode * 59 + this.IdCard.GetHashCode();
                if (this.TimeStamp != null)
                    hashCode = hashCode * 59 + this.TimeStamp.GetHashCode();
                if (this.GroupId != null)
                    hashCode = hashCode * 59 + this.GroupId.GetHashCode();
                return hashCode;
            }
        }
    }

}
