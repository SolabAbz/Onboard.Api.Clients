/* 
 * Onboard Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Onboard.Api.Client.CSharp.Client.SwaggerDateConverter;

namespace Onboard.Api.Client.CSharp.Model
{
    /// <summary>
    /// InlineResponse200
    /// </summary>
    [DataContract]
    public partial class InlineResponse200 :  IEquatable<InlineResponse200>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse200" /> class.
        /// </summary>
        /// <param name="certificationId">certificationId.</param>
        /// <param name="groupId">groupId.</param>
        /// <param name="name">name.</param>
        /// <param name="description">description.</param>
        /// <param name="validityPeriod">validityPeriod.</param>
        /// <param name="requiresExpiryDate">requiresExpiryDate.</param>
        /// <param name="matrixCertification">matrixCertification.</param>
        /// <param name="listOrder">listOrder.</param>
        /// <param name="certificationCategoryId">certificationCategoryId.</param>
        /// <param name="trainingCourseLength">trainingCourseLength.</param>
        /// <param name="isCoreMobilisation">isCoreMobilisation.</param>
        /// <param name="trainingCost">trainingCost.</param>
        /// <param name="timeStamp">timeStamp.</param>
        /// <param name="certificationCategory">certificationCategory.</param>
        public InlineResponse200(int? certificationId = default(int?), Guid? groupId = default(Guid?), string name = default(string), string description = default(string), int? validityPeriod = default(int?), bool? requiresExpiryDate = default(bool?), bool? matrixCertification = default(bool?), double? listOrder = default(double?), int? certificationCategoryId = default(int?), int? trainingCourseLength = default(int?), bool? isCoreMobilisation = default(bool?), double? trainingCost = default(double?), byte[] timeStamp = default(byte[]), CertificationCertificateCertificationCategory certificationCategory = default(CertificationCertificateCertificationCategory))
        {
            this.CertificationId = certificationId;
            this.GroupId = groupId;
            this.Name = name;
            this.Description = description;
            this.ValidityPeriod = validityPeriod;
            this.RequiresExpiryDate = requiresExpiryDate;
            this.MatrixCertification = matrixCertification;
            this.ListOrder = listOrder;
            this.CertificationCategoryId = certificationCategoryId;
            this.TrainingCourseLength = trainingCourseLength;
            this.IsCoreMobilisation = isCoreMobilisation;
            this.TrainingCost = trainingCost;
            this.TimeStamp = timeStamp;
            this.CertificationCategory = certificationCategory;
        }
        
        /// <summary>
        /// Gets or Sets CertificationId
        /// </summary>
        [DataMember(Name="certificationId", EmitDefaultValue=false)]
        public int? CertificationId { get; set; }

        /// <summary>
        /// Gets or Sets GroupId
        /// </summary>
        [DataMember(Name="groupId", EmitDefaultValue=false)]
        public Guid? GroupId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets ValidityPeriod
        /// </summary>
        [DataMember(Name="validityPeriod", EmitDefaultValue=false)]
        public int? ValidityPeriod { get; set; }

        /// <summary>
        /// Gets or Sets RequiresExpiryDate
        /// </summary>
        [DataMember(Name="requiresExpiryDate", EmitDefaultValue=false)]
        public bool? RequiresExpiryDate { get; set; }

        /// <summary>
        /// Gets or Sets MatrixCertification
        /// </summary>
        [DataMember(Name="matrixCertification", EmitDefaultValue=false)]
        public bool? MatrixCertification { get; set; }

        /// <summary>
        /// Gets or Sets ListOrder
        /// </summary>
        [DataMember(Name="listOrder", EmitDefaultValue=false)]
        public double? ListOrder { get; set; }

        /// <summary>
        /// Gets or Sets CertificationCategoryId
        /// </summary>
        [DataMember(Name="certificationCategoryId", EmitDefaultValue=false)]
        public int? CertificationCategoryId { get; set; }

        /// <summary>
        /// Gets or Sets TrainingCourseLength
        /// </summary>
        [DataMember(Name="trainingCourseLength", EmitDefaultValue=false)]
        public int? TrainingCourseLength { get; set; }

        /// <summary>
        /// Gets or Sets IsCoreMobilisation
        /// </summary>
        [DataMember(Name="isCoreMobilisation", EmitDefaultValue=false)]
        public bool? IsCoreMobilisation { get; set; }

        /// <summary>
        /// Gets or Sets TrainingCost
        /// </summary>
        [DataMember(Name="trainingCost", EmitDefaultValue=false)]
        public double? TrainingCost { get; set; }

        /// <summary>
        /// Gets or Sets TimeStamp
        /// </summary>
        [DataMember(Name="timeStamp", EmitDefaultValue=false)]
        public byte[] TimeStamp { get; set; }

        /// <summary>
        /// Gets or Sets CertificationCategory
        /// </summary>
        [DataMember(Name="certificationCategory", EmitDefaultValue=false)]
        public CertificationCertificateCertificationCategory CertificationCategory { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse200 {\n");
            sb.Append("  CertificationId: ").Append(CertificationId).Append("\n");
            sb.Append("  GroupId: ").Append(GroupId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ValidityPeriod: ").Append(ValidityPeriod).Append("\n");
            sb.Append("  RequiresExpiryDate: ").Append(RequiresExpiryDate).Append("\n");
            sb.Append("  MatrixCertification: ").Append(MatrixCertification).Append("\n");
            sb.Append("  ListOrder: ").Append(ListOrder).Append("\n");
            sb.Append("  CertificationCategoryId: ").Append(CertificationCategoryId).Append("\n");
            sb.Append("  TrainingCourseLength: ").Append(TrainingCourseLength).Append("\n");
            sb.Append("  IsCoreMobilisation: ").Append(IsCoreMobilisation).Append("\n");
            sb.Append("  TrainingCost: ").Append(TrainingCost).Append("\n");
            sb.Append("  TimeStamp: ").Append(TimeStamp).Append("\n");
            sb.Append("  CertificationCategory: ").Append(CertificationCategory).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse200);
        }

        /// <summary>
        /// Returns true if InlineResponse200 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse200 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse200 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CertificationId == input.CertificationId ||
                    (this.CertificationId != null &&
                    this.CertificationId.Equals(input.CertificationId))
                ) && 
                (
                    this.GroupId == input.GroupId ||
                    (this.GroupId != null &&
                    this.GroupId.Equals(input.GroupId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ValidityPeriod == input.ValidityPeriod ||
                    (this.ValidityPeriod != null &&
                    this.ValidityPeriod.Equals(input.ValidityPeriod))
                ) && 
                (
                    this.RequiresExpiryDate == input.RequiresExpiryDate ||
                    (this.RequiresExpiryDate != null &&
                    this.RequiresExpiryDate.Equals(input.RequiresExpiryDate))
                ) && 
                (
                    this.MatrixCertification == input.MatrixCertification ||
                    (this.MatrixCertification != null &&
                    this.MatrixCertification.Equals(input.MatrixCertification))
                ) && 
                (
                    this.ListOrder == input.ListOrder ||
                    (this.ListOrder != null &&
                    this.ListOrder.Equals(input.ListOrder))
                ) && 
                (
                    this.CertificationCategoryId == input.CertificationCategoryId ||
                    (this.CertificationCategoryId != null &&
                    this.CertificationCategoryId.Equals(input.CertificationCategoryId))
                ) && 
                (
                    this.TrainingCourseLength == input.TrainingCourseLength ||
                    (this.TrainingCourseLength != null &&
                    this.TrainingCourseLength.Equals(input.TrainingCourseLength))
                ) && 
                (
                    this.IsCoreMobilisation == input.IsCoreMobilisation ||
                    (this.IsCoreMobilisation != null &&
                    this.IsCoreMobilisation.Equals(input.IsCoreMobilisation))
                ) && 
                (
                    this.TrainingCost == input.TrainingCost ||
                    (this.TrainingCost != null &&
                    this.TrainingCost.Equals(input.TrainingCost))
                ) && 
                (
                    this.TimeStamp == input.TimeStamp ||
                    (this.TimeStamp != null &&
                    this.TimeStamp.Equals(input.TimeStamp))
                ) && 
                (
                    this.CertificationCategory == input.CertificationCategory ||
                    (this.CertificationCategory != null &&
                    this.CertificationCategory.Equals(input.CertificationCategory))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CertificationId != null)
                    hashCode = hashCode * 59 + this.CertificationId.GetHashCode();
                if (this.GroupId != null)
                    hashCode = hashCode * 59 + this.GroupId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.ValidityPeriod != null)
                    hashCode = hashCode * 59 + this.ValidityPeriod.GetHashCode();
                if (this.RequiresExpiryDate != null)
                    hashCode = hashCode * 59 + this.RequiresExpiryDate.GetHashCode();
                if (this.MatrixCertification != null)
                    hashCode = hashCode * 59 + this.MatrixCertification.GetHashCode();
                if (this.ListOrder != null)
                    hashCode = hashCode * 59 + this.ListOrder.GetHashCode();
                if (this.CertificationCategoryId != null)
                    hashCode = hashCode * 59 + this.CertificationCategoryId.GetHashCode();
                if (this.TrainingCourseLength != null)
                    hashCode = hashCode * 59 + this.TrainingCourseLength.GetHashCode();
                if (this.IsCoreMobilisation != null)
                    hashCode = hashCode * 59 + this.IsCoreMobilisation.GetHashCode();
                if (this.TrainingCost != null)
                    hashCode = hashCode * 59 + this.TrainingCost.GetHashCode();
                if (this.TimeStamp != null)
                    hashCode = hashCode * 59 + this.TimeStamp.GetHashCode();
                if (this.CertificationCategory != null)
                    hashCode = hashCode * 59 + this.CertificationCategory.GetHashCode();
                return hashCode;
            }
        }
    }

}
